#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node{
    int key;
    struct node * prev;
    struct node * next;
};
struct node *l=NULL;
struct node * create(int x){
    struct node * temp=(struct node *)malloc(sizeof(struct node));
    temp->key=x;
    temp->prev=NULL;
    temp->next=NULL;
    return temp;
}
// Search function 
void Search(node *root, int data)
{
	int depth = 0;
	node *temp = new node;
	temp = root;
	while(temp != NULL)
	{
		depth++;
		if(temp->key == data){
			printf("\n Data found at depth : %d",depth);
			return;
		}
		else if(temp->key > data)
			temp = temp->prev;
		else
			temp = temp->next;
	} 
	printf("\n Data not found");
	return;
}

struct node *insert(struct node *root,int key){
    struct node* newnode = create(key);
    node* x = root;
    node* y = NULL;
    while (x != NULL) {
        y = x;
        if (key < x->key)
            x = x->prev;
        else
            x = x->next;
    }
    if (y == NULL)
        y = newnode;
      else if (key < y->key)
        y->prev = newnode;
    else
        y->next = newnode;
      return y;
} 
struct node * minValueNode(struct node* node) 
{ 
    struct node* current = node; 
    while (current && current->prev != NULL) 
        current = current->prev; 
     return current; 
} 
struct node* deleteNode(struct node* root, int key) 
{ 
    if (root == NULL)
		 return root;  
    if (key < root->key) 
        root->prev = deleteNode(root->prev, key); 
    else if (key > root->key) 
        root->next = deleteNode(root->next, key); 
   
    else
    { 
        // node with only one child or no child 
        if (root->prev == NULL) 
        { 
            struct node *temp = root->next; 
            free(root); 
            return temp; 
        } 
        else if (root->next == NULL) 
        { 
            struct node *temp = root->prev; 
            free(root); 
            return temp; 
        } 
          // node with two children
        struct node* temp = minValueNode(root->next); 
        root->key = temp->key; 
        root->next = deleteNode(root->next,temp->key); 
    } 
    return root; 
} 
void Inorder(node* root)
{
    if (root == NULL)
        return;
    else {
        Inorder(root->prev);
        printf("%d ",root->key);
        Inorder(root->next);
    }
}
void preorder(node* root){
	if (root == NULL)
        return;
    else {
    	printf("%d ",root->key);
        preorder(root->prev);     
        preorder(root->next);
         
    }
}
void postorder(node* root){
	if (root == NULL)
        return;
    else {
        postorder(root->prev);     
        postorder(root->next);
        printf("%d ",root->key);
    }
}
int main(){
    node *root=NULL;
    root=insert(root,6);
    insert(root,3);
    insert(root,5);
    insert(root,1);
    insert(root,9);
    printf("\n Index of searching element 9 :");
	Search(root, 9);
    printf("\n\n INORDER OF BST:\n");
    Inorder(root);
    printf("\n\n PREORDER OF BST:\n");
    preorder(root);
    printf("\n\n POSTORDER OF BST:\n");
    postorder(root);
    printf("\n\n AFTER DELETION OF 3 BST:\n");
    deleteNode(root,6);
    Inorder(root);
    return 0;
}