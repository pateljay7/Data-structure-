
=======================================================================================
Queue :
=======================================================================================
#include<bits/stdc++.h>
using namespace std;
#define MAX_SIZE 1024
int arr[MAX_SIZE];
int front=0;
int rear=0;
 
void enQueue(int x){
        arr[front++]=x;
        cout<<x<<" is enQueued\n";
}
 
bool isEmpty(){
  if(front==rear)
  return true;
  return false;
}
 
bool isFull(){
  if(front==MAX_SIZE)
  return true;
  return false;
}
 
void deQueue(){
        if(isEmpty()){
          cout<<"Empty Queue\n";
          cout << INT_MIN;
        }
        int val=arr[rear++];
        cout<<val<<" is deQueued\n";
}
 
int queue_front(){
  if(isEmpty()){
        cout<<"Empty Queue\n";
        return INT_MIN;
  }
  return arr[front-1];
}
 
int main(){
	bool x = isFull();
	cout << x <<endl;	
	enQueue(10);
	enQueue(20);
	enQueue(30);
	deQueue();
	isFull();	 
}

========================================================================================
Circular Queue :
========================================================================================
#include<stdio.h>
# define MAX 5
int cqueue_arr[MAX];
int front = -1;
int rear = -1;
void insert(int item)
{
	if((front == 0 && rear == MAX-1) || (front == rear+1))
	{
		printf("Queue Overflow \n");
		return;
	}
	if(front == -1)
	{
		front = 0;
		rear = 0;
	}
	else
	{
		if(rear == MAX-1)
			rear = 0;
		else
			rear = rear+1;
	}
	cqueue_arr[rear] = item ;
}
void deletion()
{
	if(front == -1)
	{
		printf("Queue Underflown");
		return ;
	}
	printf("Element deleted from queue is : %d \n",cqueue_arr[front]);
	if(front == rear)
	{
		front = -1;
		rear=-1;
	}
	else
	{
		if(front == MAX-1)
			front = 0;
		else
			front = front+1;
	}
}
void display()
{
	int front_pos = front,rear_pos = rear;
	if(front == -1)
	{
		printf("Queue is empty \n");
		return;
	}	
	printf("Queue elements : \n");
	if( front_pos <= rear_pos )
		while(front_pos <= rear_pos)
	{		
		printf("%d \n",cqueue_arr[front_pos]);
		front_pos++;
	}
	else
	{
		while(front_pos <= MAX-1)
		{
			printf("%d ",cqueue_arr[front_pos]);
			front_pos++;
		}	
		front_pos = 0;
		while(front_pos <= rear_pos)
		{
			printf("%d ",cqueue_arr[front_pos]);
			front_pos++;
		}
	}	
	printf("\n");
}
int main()
{
	int choice,item;
	insert(10);
	insert(20);
	insert(30);
	insert(40);
	deletion();
	deletion();
	display();
}